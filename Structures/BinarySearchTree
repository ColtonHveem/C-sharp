using System;

namespace BinarySearchTree
{
    public class Node
    {
        internal Node Left;
        internal Node Right;
        internal Node Parent;
        internal int Value;
        internal int Height;

        public Node(int num)
        {
            Left = null;
            Right = null;
            Parent = null;
            Value = num;
        }
    }

    public class BinarySearchTree
    {
        internal Node Root;
        internal Node Current;
        public int Count;
        public BinarySearchTree()
        {
            Current = Root = null;
            Count = 0;
        }

        public bool IsEmpty()
        {
            return Root == null;
        }
        public bool IsLeaf(Node p)
        {
            if (p.Left == null && p.Right == null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public int NodeCount()
        {
            return this.Count;
        }
        //public int FindTreeHeight()
        //{
        //    return this.TreeHeight;
        //}
        public void NodeQualities(Node p)
        {

            Console.WriteLine($"The value of this node is: {p.Value}");
            if (p.Parent != null)
            {
                Console.WriteLine($"The parent node is: {p.Parent.Value}");
            }
            if (p.Parent == null)
            {
                Console.WriteLine($"The parent node is: null");
            }
            if (p.Left != null)
            {
                Console.WriteLine($"The left child node is: {p.Left.Value}");
            }
            if (p.Left == null)
            {
                Console.WriteLine($"The left child node is: null");
            }
            if (p.Right != null)
            {
                Console.WriteLine($"The right child node is: {p.Right.Value}");
            }
            if (p.Right == null)
            {
                Console.WriteLine($"The right child node is: null");
            }
            if (p.Right == null && p.Left == null)
            {
                Console.WriteLine("This node is a leaf");
            }
            if (p.Right != null || p.Left != null)
            {
                Console.WriteLine("This node is not a leaf");
            }
        }
        public void SearchNode(int p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("This tree is empty.");
            }
            else
            {
                Current = Root;

                while (Current != null)
                {
                    if (Current.Value > p)
                    {
                        Current = Current.Left;
                    }
                    if (Current.Value < p)
                    {
                        Current = Current.Right;
                    }
                    if (Current.Value == p)
                    {
                        NodeQualities(Current);
                        break;
                    }
                }

                if (Current == null)
                {
                    Console.WriteLine($"{p} is not in this tree");
                }
            }
        }
        public void InsertNode(int data)
        {
            Node newNode = new Node(data);
            if (IsEmpty())
            {
                Root = Current = newNode;
                Count++;
            }
            else
            {
                Current = Root;
                int tmp = Count + 1;

                while (Count != tmp)
                {
                    while (Current.Right != newNode && Current.Left != newNode && Current.Value != newNode.Value)
                    {
                        if (newNode.Value > Current.Value)
                        {
                            if (Current.Right != null)
                            {
                                Current = Current.Right;
                            }
                            else
                            {
                                Current.Right = newNode;
                            }

                        }
                        if (newNode.Value < Current.Value)
                        {
                            if (Current.Left != null)
                            {
                                Current = Current.Left;
                            }
                            else
                            {
                                Current.Left = newNode;
                            }
                        }
                    }
                    if (Current.Right == newNode || Current.Left == newNode)
                    {
                        newNode.Parent = Current;
                        newNode.Height = 0;
                        Current = newNode;
                        Count++;
                    }
                    else
                    {
                        tmp--;
                    }
                }

                //while (Current.Parent.Height < Current.Height + 1 && Current.Parent != null)
                //{
                //    Current.Parent.Height = Current.Parent.Height + 1;
                //    Current.Parent = Current;
                //}
            }
        }
        //public void DeleteNode(Node p, int trash)
        //{
        //    if (IsEmpty())
        //    {
        //        Console.WriteLine("This tree is empty");
        //        return;
        //    }
        //    if (p == null)
        //    {
        //        return;
        //    }
        //    if (trash < p.Value)
        //    {
        //        DeleteNode(p.Left, trash);
        //    }
        //    else if (trash > p.Value)
        //    {
        //        DeleteNode(p.Right, trash);
        //    }
        //    else
        //    {
        //        if (IsLeaf(p))
        //        {
        //            if (p == p.Parent.Left)
        //            {
        //                p.Parent.Left = null;
        //            }
        //            else
        //            {
        //                p.Parent.Right = null;
        //            }
        //            return;
        //        }
        //        else if (p.Right == null)
        //        {
        //            p = p.Left;
        //            return;
        //        }
        //        else if (p.Left == null)
        //        {
        //            p = p.Right;
        //            return;
        //        }
        //        else
        //        {
        //            int heir = FindHeir(p);
        //            DeleteNode(p.Right, heir);
        //            DeleteNode(p.Left, heir);
        //            p.Value = heir;
        //        }
        //    }
        //}
        //private int FindHeir(Node p)
        //{
        //    if (IsEmpty())
        //    {
        //        Console.WriteLine("This tree is empty");
        //        return -1;
        //    }
        //    if (IsLeaf(p))
        //    {
        //        Console.WriteLine("This node does not have an heir");
        //        return -1;
        //    }
        //    else if (p.Left == null)
        //    {
        //        return p.Right.Value;
        //    }
        //    else if (p.Right == null)
        //    {
        //        return p.Left.Value;
        //    }
        //    else
        //    {
        //        return FindInnerHeir(p);
        //    }
        //}
        //private int FindInnerHeir(Node p)
        //{
        //    if (p.Left.Right == null && p.Right.Left == null)
        //    {
        //        if (Math.Abs(p.Value - p.Left.Value) < (Math.Abs(p.Value - p.Right.Value)))
        //        {
        //            return p.Left.Value;
        //        }
        //        else
        //        {
        //            return p.Right.Value;
        //        }
        //    }
        //    else if (p.Left.Right == null && p.Right.Left != null)
        //    {
        //        return p.Left.Value;
        //    }
        //    else if (p.Left.Right != null && p.Right.Left == null)
        //    {
        //        return p.Right.Value;
        //    }
        //    else
        //    {
        //        Current = p.Right.Left;

        //        while (Current.Left != null)
        //        {
        //            Current = Current.Left;
        //        }
        //        return Current.Value;
        //    }
        //}
        public void Inorder(Node p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("There is no data in this tree");
            }
            else
            {
                if (p.Left != null)
                {
                    Inorder(p.Left);
                }

                Console.Write($"{p.Value} ");

                if (p.Right != null)
                {
                    Inorder(p.Right);
                }
            }
        }
        public void DeleteNode(int data)
        {
            Current = Root;
            bool LeftChild = false;

            if (Current == null)
            {
                return;
            }

            while (Current != null && Current.Value != data)
            {
                if (data < Current.Value)
                {
                    Current = Current.Left;
                    LeftChild = true;
                }
                else
                {
                    Current = Current.Right;
                    LeftChild = false;
                }
            }
            if (Current == null)
            {
                return;
            }
            if (Current.Right == null && Current.Left == null)
            {
                if (Current == Root)
                {
                    Root = null;
                }
                else
                {
                    if (LeftChild)
                    {
                        Current.Parent.Left = null;
                    }
                    else
                    {
                        Current.Parent.Right = null;
                    }
                }
            }
            else if (Current.Right == null)
            {
                if (Current == Root)
                {
                    Root = Current.Left;
                }
                else
                {
                    if (LeftChild)
                    {
                        Current.Parent.Left = Current.Left;
                    }
                    else
                    {
                        Current.Parent.Right = Current.Left;
                    }
                }
            }
            else if (Current.Left == null)
            {
                if (Current == Root)
                {
                    Root = Current.Right;
                }
                else
                {
                    if (LeftChild)
                    {
                        Current.Parent.Left = Current.Right;
                    }
                    else
                    {
                        Current.Parent.Right = Current.Right;
                    }
                }
            }
            else
            {
                Node heir = GetHeir(Current);

                if (Current == Root)
                {
                    Root = heir;
                }
                else if (LeftChild)
                {
                    Current.Parent.Left = heir;
                }
                else
                {
                    Current.Parent.Right = heir;
                }
            }
        }

        private Node GetHeir(Node p)
        {
            Node ParentofHeir = p;
            Node heir = p;
            Current = p.Right;

            while (Current != null)
            {
                ParentofHeir = heir;
                heir = Current;
                Current = Current.Left;
            }
            if (heir != p.Right)
            {
                ParentofHeir.Left = heir.Right;
                heir.Right = p.Left;
            }
            heir.Left = p.Left;

            return heir;
        }

        public int FindMin()
        {
            if (IsEmpty())
            {
                Console.WriteLine("This tree is empty.");
                return -1;
            }
            else
            {
                Current = Root;

                while (Current.Left != null)
                {
                    Current = Current.Left;
                }
                return Current.Value;
            }
        }
        public int FindMax()
        {
            if (IsEmpty())
            {
                Console.WriteLine("This tree is empty.");
                return -1;
            }
            else
            {
                Current = Root;

                while (Current.Right != null)
                {
                    Current = Current.Right;
                }
                return Current.Value;
            }
        }
        public int TotalLeaves(Node p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("This tree is empty");
                return -1;
            }
            else
            {
                if (p.Left == null && p.Right == null)
                {
                    return 1;
                }

                int leftleaves = 0;
                int rightleaves = 0;

                if (p.Left != null)
                {
                    leftleaves = TotalLeaves(p.Left);
                }
                if (p.Right != null)
                {
                    rightleaves = TotalLeaves(p.Right);
                }
                return leftleaves + rightleaves;
            }
        }
        public int TreeHeight(Node p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("This tree is empty");
                return -1;
            }
            else
            {
                if (p.Left == null && p.Right == null)
                {
                    return 1;
                }

                int leftheight = 0;
                int rightheight = 0;

                if (p.Left != null)
                {
                    leftheight = TreeHeight(p.Left);
                }
                if (p.Right != null)
                {
                    rightheight = TreeHeight(p.Right);
                }

                if (leftheight > rightheight)
                {
                    return (leftheight + 1);
                }
                else
                {
                    return (rightheight + 1);
                }
            }
        }
        public void Preorder(Node p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("There is no data in this tree");
            }
            else
            {
                Console.Write($"{p.Value} ");

                if (p.Left != null)
                {
                    Preorder(p.Left);
                }

                if (p.Right != null)
                {
                    Preorder(p.Right);
                }
            }
        }

        public void Postorder(Node p)
        {
            if (IsEmpty())
            {
                Console.WriteLine("There is no data in this tree");
            }
            else
            {
                if (p.Left != null)
                {
                    Postorder(p.Left);
                }

                if (p.Right != null)
                {
                    Postorder(p.Right);
                }

                Console.Write($"{p.Value} ");
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            BinarySearchTree tree = new BinarySearchTree();

            Node p = new Node(11);


            Console.Write("Binary Search Tree is empty, true or false: ");
            Console.WriteLine(tree.IsEmpty());
            Console.WriteLine();
            tree.InsertNode(50);
            tree.InsertNode(25);
            tree.InsertNode(75);
            tree.InsertNode(60);
            tree.InsertNode(34);
            tree.InsertNode(11);
            tree.InsertNode(19);
            tree.InsertNode(72);
            tree.InsertNode(41);
            tree.InsertNode(7);
            tree.InsertNode(68);
            tree.InsertNode(53);
            tree.InsertNode(36);
            Console.WriteLine("In Order Traversal:");
            tree.Inorder(tree.Root);
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("Pre Order Traversal:");
            tree.Preorder(tree.Root);
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("Post Order Traversal:");
            tree.Postorder(tree.Root);
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("The qualities of node with value 11 are: ");
            Console.WriteLine();
            tree.SearchNode(11);
            Console.WriteLine();
            Console.Write("The Maximum Value in the tree is: ");
            Console.WriteLine(tree.FindMax());
            Console.WriteLine();
            Console.Write("The Minimum Value in the tree is: ");
            Console.WriteLine(tree.FindMin());
            Console.WriteLine();
            Console.Write("The total number of Nodes in the tree is: ");
            Console.WriteLine(tree.NodeCount());
            Console.WriteLine();
            Console.Write("Total number of leaves in the tree: ");
            Console.WriteLine(tree.TotalLeaves(tree.Root));
            Console.WriteLine();
            tree.DeleteNode(75);
            tree.DeleteNode(19);
            tree.DeleteNode(11);
            tree.Postorder(tree.Root);
            Console.WriteLine();
            Console.WriteLine();
            Console.Write("Total number of leaves in the tree: ");
            Console.WriteLine(tree.TotalLeaves(tree.Root));
            Console.WriteLine();
            Console.Write("The height of the tree is: ");
            Console.WriteLine(tree.TreeHeight(tree.Root));
        }
    }
}
